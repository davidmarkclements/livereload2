{
  "name": "livereload2",
  "description": "this is a version of livereload more recently updated.",
  "version": "1.0.1",
  "contributors": [
    {
      "name": "Joshua Peek"
    },
    {
      "name": "Brian P. Hogan",
      "email": "brianhogan@napcs.com"
    },
    {
      "name": "Seb Vincent"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sebv/node-livereload/blob/livereload2/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/sebv/node-livereload/tree/livereload2"
  },
  "bin": {
    "livereload": "./bin/livereload.js"
  },
  "main": "./lib/livereload.js",
  "dependencies": {
    "opts": ">= 1.2.0",
    "websocket.io": ">= 0.1.0",
    "watchr": "~2.1.3",
    "express": "~3.0.0",
    "underscore": "~1.4.2"
  },
  "devDependencies": {
    "request": ">= 2.9.203",
    "should": ">= 0.6.3",
    "ws": ">= 0.4.20",
    "mocha": ">= 1.0.3"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "node-livereload\n===============\n\nAn implementation of the LiveReload server in Node.js. It's an alternative to the graphical [http://livereload.com/](http://livereload.com/) application, which monitors files for changes and reloads your web browser.\n\nThis is an alternative version of node-livereload, will remove it when the origin package is updated.\n\n# Example Usage\n\nFirst, install the LiveReload browser plugins by visiting [http://help.livereload.com/kb/general-use/browser-extensions](http://help.livereload.com/kb/general-use/browser-extensions).\n\nTo use livereload from the command line:\n\n    $ npm install -g livereload2\n    $ livereload --help\n    $ livereload [path]\n    \nOr to use the api within a project:\n\n    $ npm install livereload\n\nThen, simply create a server and fire it up.\n\n    livereload = require('livereload');\n    server = livereload.createServer();\n    server.watch(__dirname + \"/public\");\n\nYou can also use this with a Connect server:\n\n    connect = require('connect');\n    connect.createServer(\n      connect.compiler({ src: __dirname + \"/public\", enable: ['less'] }),\n      connect.staticProvider(__dirname + \"/public\")\n    ).listen(3000);\n\n    livereload = require('livereload');\n    server = livereload.createServer({exts: ['less']});\n    server.watch(__dirname + \"/public\");\n\n# Options\n\nThe `createServer()` method supports a few basic options, passed as a JavaScript object:\n\n* `port` is the listening port. It defaults to `35729` which is what the LiveReload extensions use currently.  \n* `exts` is an array of extensions you want to observe. The default extensions are  `html`, `css`, `js`, `png`, `gif`, `jpg`,\n  `php`, `php5`, `py`, `rb`, and `erb`\n* `applyJSLive` tells LiveReload to reload JavaScript files in the background instead of reloading the page. The default for this is `false`.\n* `applyCSSLive` tells LiveReload to reload CSS files in the background instead of refreshing the page. The default for this is `true`.\n* `exclusions` lets you specify files to ignore. By default, this includes `.git/`, `.svn/`, and `.hg/`\n* `alias` lets you specify file extensions to be aliased. By default, this maps `.styl` to `.css`, by which, changing `.styl` file never fires full page reload.\n* `delay` delay in ms before reload (default: 50)  \n\n# Trigger reload programmatically\n\nThe server is listening for post request on \"/reload\". For instance the code below triggers reload:\n\n    request = require('request');\n    request.post('http://localhost:35729/reload');\n\n# Limitations\n\nRight now this is extremely simple. It relies on polling so there's a delay in refreshing the browser. It could be faster.\n\n# License\n\nCopyright (c) 2010-2012 Joshua Peek and Brian P. Hogan.\n\nReleased under the MIT license. See `LICENSE` for details.\n\n",
  "readmeFilename": "README.md",
  "_id": "livereload2@1.0.1",
  "_from": "livereload2@~1.0.1"
}
